HOME: [home, string, '', The location of the TruffleRuby installation files]
LAUNCHER: [launcher, string, '', The location of the TruffleRuby launcher program]

LOAD_PATHS: [[load_paths, -I], string-array, [], Load paths]
REQUIRED_LIBRARIES: [[required_libraries, -r], string-array, [], Required libraries]
READ_RUBYOPT: [read_rubyopt, boolean, true, Read RUBYOPT and TRUFFLERUBYOPT environment variables]
IGNORE_LINES_BEFORE_RUBY_SHEBANG: [[ignore_lines_before_ruby_shebang, -x], boolean, false, "strip off text before #!ruby line"]
WORKING_DIRECTORY: [[working_directory, -C], string, '', Interpreter will switch to this directory]
EXECUTION_ACTION: [[execution_action, -e, -S], enum/execution_action, none, What should be done after context is created]
TO_EXECUTE: [[to_execute, -e, -S], string, '', "A thing to be executed: a file, inline script, etc. Used by execution_action when applicable."]
DEFAULT_EXECUTION_ACTION: [default_execution_action, enum/default_execution_action, irb, What should be done when no action is set.]
SYNTAX_CHECK: [[syntax_check, -c], boolean, false, Do not execute just check syntax.]
SHOW_VERSION: [[show_version, --version], boolean, false, Show version.]
SHOW_COPYRIGHT: [[show_copyright, --copyright], boolean, false, Show copyright.]
SHOW_HELP: [[show_help, -h, --help], enum/show_help, none, What help should be shown.]
DEBUG: [[debug, -d], boolean, false, Debug]
VERBOSITY: [[verbosity, -v, -w, -W, --verbose], enum/verbosity, false, Verbosity]
ARGV_GLOBALS: [[argv_globals, -s], boolean, false, Parse options in script argv into global variables.]
ARGV_GLOBAL_VALUES: [argv_global_values, string-array, [], Parsed options from script argv with a value.]
ARGV_GLOBAL_FLAGS: [argv_global_flags, string-array, [], Parsed options from script argv acting as flags (no value).]

FROZEN_STRING_LITERALS: [frozen_string_literals, boolean, false, Use frozen string literals]
RUBYGEMS: [rubygems, boolean, true, Use RubyGems]
LAZY_RUBYGEMS: [rubygems.lazy, boolean, true, Load RubyGems lazily on first failing require]
PATCHING: [patching, boolean, true, Use patching]
PATCHING_OPENSSL: [patching_openssl, boolean, false, Use openssl patching]
DID_YOU_MEAN: [did_you_mean, boolean, true, Use did_you_mean]

INTERNAL_ENCODING: [[internal_encoding, -E, -U], string, '', Internal encoding]
EXTERNAL_ENCODING: [[external_encoding, -E], string, '', External encoding]

POLYGLOT_STDIO: [ployglot.stdio, boolean, true, Use standard IO streams from the PolyglotEngine]
SYNC_STDIO: [sync.stdio, boolean, true, Sync operations on standard IO streams]
PLATFORM_USE_JAVA: [platform.use_java, boolean, false, 'Use a pure-Java platform, so no native POSIX']
NATIVE_INTERRUPT: [platform.native_interrupt, boolean, true, Use the SIGVTALRM signal to interrupt native blocking calls]
CEXT_LOCK: [cexts.lock, boolean, true, Use a Global Lock when running C extensions]

TRACE_CALLS: [trace.calls, boolean, true, 'Support tracing (set_trace_func, TracePoint) of method calls']
COVERAGE_GLOBAL: [coverage.global, boolean, false, Run coverage for all code and print results on exit]
INLINE_JS: [inline_js, boolean, false, Allow inline JavaScript]

CORE_LOAD_PATH: [core.load_path, string, 'resource:/truffleruby', Location to load the Truffle core library from]
STDLIB_AS_INTERNAL: [stdlib_as_internal, boolean, true, 'Mark stdlib sources (really, anything loaded from the TruffleRuby home) as internal']

LAZY_TRANSLATION_CORE: [lazy_translation.core, boolean, true, Lazily translation of core source files]
LAZY_TRANSLATION_USER: [lazy_translation.user, boolean, false, 'Lazily translation of stdlib, gem and user source files']
LAZY_TRANSLATION_LOG: [lazy_translation.log, boolean, false, Log lazy translations from the parser AST to the Truffle AST]

ARRAY_UNINITIALIZED_SIZE: [array.uninitialized_size, integer, 16, How large an Array to allocate when we have no other information to go on]
ARRAY_SMALL: [array.small, integer, 3, Maximum size of an Array to consider small for optimisations]
HASH_PACKED_ARRAY_MAX: [hash.packed_array.max, integer, 3, Maximum size of a Hash to consider using the packed array storage strategy for]

ROPE_LAZY_SUBSTRINGS: [rope.lazy_substrings, boolean, true, Indicates whether a substring operation on a rope should be performed lazily]
ROPE_PRINT_INTERN_STATS: [rope.print_intern_stats, boolean, false, Print interned rope stats at application exit]
ROPE_DEPTH_THRESHOLD: [rope.depth_threshold, integer, 128, Threshold value at which ropes will be rebalanced (indirectly controls flattening as well)]

GLOBAL_VARIABLE_MAX_INVALIDATIONS: [global_variable.max_invalidations, integer, 1, Maximum number of times a global variable can be changed to be considered constant]

DEFAULT_CACHE: [default_cache, integer, 8, Default size for caches]

METHOD_LOOKUP_CACHE: [method_lookup.cache, integer, DEFAULT_CACHE, Method lookup cache size]
DISPATCH_CACHE: [dispatch.cache, integer, DEFAULT_CACHE, Dispatch (various forms of method call) cache size]
YIELD_CACHE: [yield.cache, integer, DEFAULT_CACHE, Yield cache size]
METHOD_TO_PROC_CACHE: [to_proc.cache, integer, DEFAULT_CACHE, Method#to_proc cache size]
IS_A_CACHE: [is_a.cache, integer, DEFAULT_CACHE, 'Kernel#is_a? and #kind_of? cache size']
BIND_CACHE: [bind.cache, integer, DEFAULT_CACHE, Cache size of test for being able to bind a method to a module]
CONSTANT_CACHE: [constant.cache, integer, DEFAULT_CACHE, Constant cache size]
INSTANCE_VARIABLE_CACHE: [instance_variable.cache, integer, DEFAULT_CACHE, Instance variable cache size]
BINDING_LOCAL_VARIABLE_CACHE: [binding_local_variable.cache, integer, DEFAULT_CACHE, Binding#local_variable_get/set cache size]
SYMBOL_TO_PROC_CACHE: [symbol_to_proc.cache, integer, DEFAULT_CACHE, Symbol#to_proc cache size]
ALLOCATE_CLASS_CACHE: [allocate_class.cache, integer, DEFAULT_CACHE, Allocation size class cache size]
PACK_CACHE: [pack.cache, integer, DEFAULT_CACHE, Array#pack cache size]
UNPACK_CACHE: [unpack.cache, integer, DEFAULT_CACHE, String#unpack cache size]
EVAL_CACHE: [eval.cache, integer, DEFAULT_CACHE, eval cache size]
CLASS_CACHE: [class.cache, integer, DEFAULT_CACHE, .class and .metaclass cache size]
ENCODING_COMPATIBLE_QUERY_CACHE: [encoding_compatible_query.cache, integer, DEFAULT_CACHE, 'Encoding.compatible? cache size']
ENCODING_LOADED_CLASSES_CACHE: [encoding_loaded_classes.cache, integer, DEFAULT_CACHE, Cache size of encoding operations based on anticipated number of total active encodings]
THREAD_CACHE: [thread.cache, integer, DEFAULT_CACHE, Cache size of operations that depend on a particular thread]
ROPE_CLASS_CACHE: [rope_class.cache, integer, 6, Cache size for rope operations that depend on a concrete rope implementation to avoid virtual calls]
INTEROP_CONVERT_CACHE: [interop.convert.cache, integer, DEFAULT_CACHE, Cache size for converting values for interop]
INTEROP_EXECUTE_CACHE: [interop.execute.cache, integer, DEFAULT_CACHE, Cache size for interop EXECUTE messages]
INTEROP_READ_CACHE: [interop.read.cache, integer, DEFAULT_CACHE, Cache size for interop READ messages]
INTEROP_WRITE_CACHE: [interop.write.cache, integer, DEFAULT_CACHE, Cache size for interop WRITE messages]
INTEROP_INVOKE_CACHE: [interop.invoke.cache, integer, DEFAULT_CACHE, Cache size for interop INVOKE messages]
TIME_FORMAT_CACHE: [time.format.cache, integer, DEFAULT_CACHE, Cache size for parsed time format specifiers]
POW_CACHE: [integer.pow.cache, integer, DEFAULT_CACHE, Cache size for Integer#** with a constant exponent]

CLONE_DEFAULT: [clone.default, boolean, true, Default option for cloning]
INLINE_DEFAULT: [inline.default, boolean, true, Default option for inlining]
CORE_ALWAYS_CLONE: [core.always_clone, boolean, CLONE_DEFAULT, Always clone built-in core methods]
INLINE_NEEDS_CALLER_FRAME: [inline_needs_caller_frame, boolean, INLINE_DEFAULT, Inline methods that need their caller frame]
YIELD_ALWAYS_CLONE: [yield.always_clone, boolean, CLONE_DEFAULT, Always clone yields]
YIELD_ALWAYS_INLINE: [yield.always_inline, boolean, INLINE_DEFAULT, Always inline yields]
METHODMISSING_ALWAYS_CLONE: [method_missing.always_clone, boolean, CLONE_DEFAULT, 'Always clone #method_missing']
METHODMISSING_ALWAYS_INLINE: [method_missing.always_inline, boolean, INLINE_DEFAULT, 'Always inline #method_missing']
CALL_WITH_BLOCK_ALWAYS_CLONE: [call_with_block.always_clone, boolean, CLONE_DEFAULT, Always clone calls with a literal block]

PACK_UNROLL_LIMIT: [pack.unroll, integer, 4, 'If a pack or unpack expression has a loop less than this many iterations, unroll it']
PACK_RECOVER_LOOP_MIN: [pack.recover, integer, 32, 'If a pack or unpack expression is longer than this, attempt to recover loops']

EXCEPTIONS_STORE_JAVA: [exceptions.store_java, boolean, false, Store the Java exception with the Ruby backtrace]
EXCEPTIONS_PRINT_JAVA: [exceptions.print_java, boolean, false, Print Java exceptions at the point of translating them to Ruby exceptions]
EXCEPTIONS_PRINT_UNCAUGHT_JAVA: [exceptions.print_uncaught_java, boolean, false, Print uncaught Java exceptions at the point of translating them to Ruby exceptions]
EXCEPTIONS_PRINT_RUBY_FOR_JAVA: [exceptions.print_ruby_for_java, boolean, false, 'When printing a Java backtrace, also print the Ruby backtrace at that point']
EXCEPTIONS_TRANSLATE_ASSERT: [exceptions.translate_assert, boolean, true, Translate failed Java assertions to Ruby exceptions]
EXCEPTIONS_WARN_STACKOVERFLOW: [exceptions.warn_stackoverflow, boolean, true, Warn when a stack overflow error is thrown]
EXCEPTIONS_WARN_OUT_OF_MEMORY: [exceptions.warn_out_of_memory, boolean, true, Warn when an out-of-memory error is thrown]
BACKTRACES_HIDE_CORE_FILES: [backtraces.hide_core_files, boolean, true, 'Hide core source files in backtraces, like MRI does']
BACKTRACES_INTERLEAVE_JAVA: [backtraces.interleave_java, boolean, false, Interleave Java stacktraces into the Ruby backtrace]
BACKTRACES_LIMIT: [backtraces.limit, integer, 9999, Limit the size of Ruby backtraces]
BACKTRACES_OMIT_UNUSED: [backtraces.omit_unused, boolean, true, Omit backtraces that should be unused as they have pure rescue expressions]
BASICOPS_INLINE: [basic_ops.inline, boolean, true, Inline basic operations (like Fixnum operators) in the AST without a call]

GRAAL_WARNING_UNLESS: [graal.warn_unless, boolean, true, Warn unless the JVM has the Graal compiler]

SHARED_OBJECTS_ENABLED: [shared.objects, boolean, true, Enable shared objects]
SHARED_OBJECTS_DEBUG: [shared.objects.debug, boolean, false, Print information about shared objects]
SHARED_OBJECTS_FORCE: [shared.objects.force, boolean, false, Force sharing of objects roots at startup]
SHARED_OBJECTS_SHARE_ALL: [shared.objects.share_all, boolean, false, Consider all objects as shared]

CEXTS_LOG_LOAD: [cexts.log.load, boolean, false, Log loading of cexts]
CEXTS_LIBRARY_REMAP: [cexts.remap, string-array, [], 'Remap the name of native libraries, written in the form libexample.so=path/to/actual/libexample.so']

LOG_DYNAMIC_CONSTANT_LOOKUP: [constant.dynamic_lookup.log, boolean, false, Log source code positions where dynamic constant lookup is performed]

OPTIONS_LOG: [options.log, boolean, false, Log the final value of all options]

LOG_LOAD: [log.load, boolean, false, Log loading files]
LOG_FEATURE_LOCATION: [log.feature_location, boolean, false, Log the process of finding features]

FRAME_VARIABLE_ACCESS_LIMIT: [frame.variable.access.limit, integer, 5, Maximum number of specialisations for nodes which access variables in another frame]
